/*
 * File: app/view/LoadingPanel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Betit.view.LoadingPanel', {
    extend: 'Ext.Panel',

    config: {
        isfirsttime: 'true',
        fullscreen: false,
        height: 480,
        id: 'loading-panel',
        width: 320,
        layout: {
            type: 'vbox'
        },
        scrollable: 'vertical',
        cls: [
            'loading'
        ],
        listeners: [
            {
                fn: 'onPanelPainted',
                single: false,
                event: 'painted'
            }
        ],
        items: [
            {
                xtype: 'container',
                cls: [
                    'loading-logo'
                ],
                height: 156,
                id: 'loading-panel-logo',
                itemId: 'mycontainer',
                left: 105,
                top: 110,
                width: 118
            },
            {
                xtype: 'button',
                baseCls: 'x-button-beitit',
                cls: 'loading-sina-button',
                height: 30,
                id: 'loading-sina-button',
                left: 18,
                top: 328,
                width: 135,
                pressedCls: 'loading-sina-button-press'
            },
            {
                xtype: 'button',
                baseCls: 'x-button-beitit',
                cls: 'loading-qq-button',
                height: 30,
                id: 'loading-qq-button',
                left: 168,
                top: 328,
                width: 135,
                pressedCls: 'loading-qq-button-press'
            }
        ]
    },

    onPanelPainted: function(component, options) {
        /*if (Ext.Viewport.getOrientation() == 'portrait'){
        var dimensions = component.getSize();
        if (dimensions.width>dimensions.height){
        component.setWidth(dimensions.height);
        component.setHeight(dimensions.width);
        var items = component.getItems().items;
        var index;
        for (index in items){
        dimensions = items[index].getSize();
        var top = items[index].getTop();
        var left = items[index].getLeft();
        items[index].setSize(dimensions.height, dimensions.width);
        items[index].setTop(left);
        items[index].setLeft(top);
        }
        }
        }*/

        /*if (Ext.Viewport.getOrientation() == 'portrait'){

        var w = Ext.Viewport.getWindowWidth();
        var h = Ext.Viewport.getWindowHeight();
        var dimensions = component.getSize();
        var newHeight = w*dimensions.height/dimensions.width;
        component.setWidth(w);
        component.setHeight(newHeight);
        Ext.Viewport.setHeight(newHeight);
        var ratio = newHeight/dimensions.height;
        var items = component.getItems().items;
        var index;
        for (index in items){

        items[index].setHeight( items[index].getHeight()*ratio);
        items[index].setWidth( items[index].getWidth()*ratio);
        items[index].setTop( items[index].getTop()*ratio);
        items[index].setLeft( items[index].getLeft()*ratio);

        }
        //   Ext.Viewport.setMargin(0);

    }else{*/

        var w = Ext.Viewport.getWindowWidth();
        var h = Ext.Viewport.getWindowHeight();
        var dimensions = component.getSize();
        if (w/h>dimensions.width/dimensions.height){

            var newWidth = h*dimensions.width/dimensions.height;
            var ratio = newWidth/dimensions.width; // scale
            var margin = (w-newWidth)/2;
            component.setWidth(newWidth);
            component.setHeight(h);
            //  Ext.Viewport.setSize(newWidth, h);

            var items = component.getItems().items;
            var index;
            for (index in items){
                items[index].setHeight( items[index].getHeight()*ratio);
                items[index].setWidth( items[index].getWidth()*ratio);
                items[index].setTop( items[index].getTop()*ratio);
                items[index].setLeft( items[index].getLeft()*ratio);

            }
            // ios could not user Ext.Viewport.getOrientation() == 'landscape' check
            // because the web app is defferent frome the safari definitation.
            if ( Ext.os.is.iOS && !component.getIsfirsttime()){
                margin = margin+80;

            }

            Ext.Viewport.setMargin("0 0 0 "+margin);

        }else{
            Ext.Viewport.setMargin(0);
        }/*else{
            var newHeight = w*dimensions.height/dimensions.width;
            var ratio = newHeight/dimensions.height;
            var margin = (h-newHeight)/2;
            component.setHeight(newHeight);
            component.setWidth(w);

            var items = component.getItems().items;
            var index;
            for (index in items){

                items[index].setHeight( items[index].getHeight()*ratio);
                items[index].setWidth( items[index].getWidth()*ratio);
                items[index].setTop( items[index].getTop()*ratio);
                items[index].setLeft( items[index].getLeft()*ratio);

            }

            Ext.Viewport.setMargin("0 "+margin+" 0 "+margin);
        }*/
        //}

    }

});